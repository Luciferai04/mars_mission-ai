name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install GDAL
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
        export CPLUS_INCLUDE_PATH=/usr/include/gdal
        export C_INCLUDE_PATH=/usr/include/gdal
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        pip install ruff black
        ruff check src/ tests/
        black --check src/ tests/
    
    - name: Run tests
      run: |
        pytest -v --cov=src --cov-report=xml --cov-report=html
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Image

  smoke:
    name: Docker Compose Smoke Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    env:
      MARL_ALGO: dqn
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Compose build
      run: docker compose build
    - name: Compose up
      run: docker compose up -d
    - name: Wait for service health
      run: |
        for p in 8002 8003 8004 8005 8006 8007; do \
          echo "Waiting for :$p"; \
          for i in {1..60}; do curl -sf http://localhost:$p/health >/dev/null 2>&1 && break || sleep 2; done; \
        done
    - name: Smoke - Planning /plan
      run: |
        code=$(curl -s -o /tmp/plan.json -w '%{http_code}' -X POST \
          http://localhost:8005/plan -H 'Content-Type: application/json' \
          -d '{"sol":1600,"lat":18.4447,"lon":77.4508,"battery_soc":0.65,"time_budget_min":480,"objectives":["traverse","image","sample"]}')
        test "$code" = "200" || (echo "Unexpected code $code" && cat /tmp/plan.json && exit 1)
        grep -q '"status":"completed"' /tmp/plan.json || (cat /tmp/plan.json && exit 1)
    - name: Smoke - MARL fleet coordination
      run: |
        code=$(curl -s -o /tmp/fleet.json -w '%{http_code}' -X POST \
          http://localhost:8003/coordinate_fleet -H 'Content-Type: application/json' \
          -d '{"rovers":[{"rover_id":"percy","lat":18.444,"lon":77.451,"battery_soc":0.6,"time_remaining":300},{"rover_id":"helicopter","lat":18.446,"lon":77.452,"battery_soc":0.8,"time_remaining":200}]}')
        test "$code" = "200" || (echo "Unexpected code $code" && cat /tmp/fleet.json && exit 1)
        grep -q '"status":"success"' /tmp/fleet.json || (cat /tmp/fleet.json && exit 1)
    - name: Compose down
      if: always()
      run: docker compose down -v

  load-test:
    name: k6 Load Smoke
    runs-on: ubuntu-latest
    needs: smoke
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Compose up
      run: docker compose up -d --build
    - name: Wait for planning health
      run: |
        for i in {1..60}; do curl -sf http://localhost:8005/health >/dev/null 2>&1 && break || sleep 2; done
    - name: Run k6
      uses: grafana/k6-action@v0.2.0
      with:
        filename: tests/k6/plan_smoke.js
      env:
        BASE_URL: http://localhost:8005
    - name: Compose down
      if: always()
      run: docker compose down -v
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.ref == 'refs/heads/main'
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mars-mission-planner:latest
          ${{ secrets.DOCKER_USERNAME }}/mars-mission-planner:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/mars-mission-planner:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/mars-mission-planner:buildcache,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/mars-mission-planner:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/production/
